/* The following code was generated by JFlex 1.4.2 on 11/4/09 5:46 PM */

// Based on the "simple example" in the JFlex manual:
// http://jflex.de/manual.html

/* JFlex example: part of Java language lexer specification */
//import java_cup.runtime.*;
//import compiler.*;

/**
 * This class is a simple example lexer.
 */



public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\23"+
    "\1\54\1\0\1\10\1\0\1\24\1\0\1\11\1\12\1\5\1\27"+
    "\1\16\1\30\1\17\1\4\1\7\1\7\1\7\1\7\1\7\1\7"+
    "\1\7\1\7\1\7\1\7\1\0\1\15\1\22\1\20\1\21\2\0"+
    "\32\6\1\0\1\55\1\0\1\26\1\10\1\0\1\35\1\31\1\37"+
    "\1\43\1\34\1\45\1\6\1\52\1\44\2\6\1\33\1\6\1\36"+
    "\1\32\1\51\1\6\1\47\1\40\1\42\1\50\1\53\1\46\1\41"+
    "\2\6\1\13\1\25\1\14\1\0\41\10\2\0\4\10\4\0\1\6"+
    "\2\0\1\10\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6"+
    "\21\0\130\10\5\0\23\10\12\0\1\6\13\0\1\6\1\0\3\6"+
    "\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6"+
    "\4\0\202\6\1\0\4\10\3\0\105\6\1\0\46\6\2\0\2\6"+
    "\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\10"+
    "\1\0\27\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\10"+
    "\13\0\33\6\5\0\3\6\15\0\4\10\14\0\6\10\13\0\32\6"+
    "\5\0\13\6\16\10\7\0\12\7\4\0\2\6\1\10\143\6\1\0"+
    "\1\6\10\10\1\0\6\10\2\6\2\10\1\0\4\10\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\10\1\6\1\10\36\6\33\10\2\0"+
    "\3\6\60\0\46\6\13\10\1\6\u014f\0\3\10\66\6\2\0\1\10"+
    "\1\6\20\10\2\0\1\6\4\10\3\0\12\6\2\10\2\0\12\7"+
    "\21\0\3\10\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\10\1\6\7\10\2\0\2\10"+
    "\2\0\3\10\11\0\1\10\4\0\2\6\1\0\3\6\2\10\2\0"+
    "\12\7\2\6\2\10\15\0\3\10\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\13\0\4\6\1\0"+
    "\1\6\7\0\12\7\2\10\3\6\14\0\3\10\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\10\1\6\10\10\1\0\3\10\1\0\3\10\2\0\1\6\17\0"+
    "\2\6\2\10\2\0\12\7\1\0\1\10\17\0\3\10\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\10\1\6\6\10\3\0\2\10\2\0\3\10\10\0\2\10"+
    "\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\10"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0"+
    "\3\6\4\0\5\10\3\0\3\10\1\0\4\10\11\0\1\10\17\0"+
    "\11\7\11\0\1\10\7\0\3\10\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\4\0\7\10\1\0\3\10\1\0"+
    "\4\10\7\0\2\10\11\0\2\6\4\0\12\7\22\0\2\10\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\10\1\6\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0"+
    "\1\6\1\0\2\6\4\0\12\7\22\0\2\10\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\4\0\6\10\2\0\3\10\1\0"+
    "\4\10\11\0\1\10\10\0\2\6\4\0\12\7\22\0\2\10\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0"+
    "\60\6\1\10\2\6\7\10\4\0\1\10\7\6\10\10\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\10\2\6\6\10\1\0\2\10\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\10\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\10\6\0\12\7\13\0\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\2\10\10\6\1\0\42\6\6\0\24\10\1\0"+
    "\2\10\4\6\4\0\10\10\1\0\44\10\11\0\1\10\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\10\3\0\4\10\6\0\12\7"+
    "\6\0\6\6\4\10\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\10\17\0\15\6\1\0"+
    "\4\6\3\10\13\0\22\6\3\10\13\0\22\6\2\10\14\0\15\6"+
    "\1\0\3\6\1\0\2\10\14\0\64\6\40\10\3\0\1\6\3\0"+
    "\1\10\1\6\1\10\2\0\12\7\41\0\3\10\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\10\126\0\35\6\3\0\14\10\4\0\14\10"+
    "\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0"+
    "\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0"+
    "\4\10\32\0\5\10\20\0\2\10\23\0\1\10\13\0\4\10\6\0"+
    "\6\10\1\0\1\6\15\0\1\6\40\0\22\10\36\0\15\10\4\0"+
    "\1\10\3\0\6\10\27\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0"+
    "\44\10\u0e81\0\2\6\1\10\31\0\17\10\1\0\5\6\2\0\3\10"+
    "\2\6\4\0\126\6\2\0\2\10\2\0\3\6\1\0\132\6\1\10"+
    "\4\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0"+
    "\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\10\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6\1\10"+
    "\3\0\20\10\20\0\4\10\17\0\2\10\30\0\3\10\31\0\1\10"+
    "\6\0\5\6\1\0\207\6\2\0\1\10\4\0\1\10\13\0\12\7"+
    "\7\0\32\6\4\0\1\10\1\0\32\6\12\0\1\10\131\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\10\3\0"+
    "\2\10\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\15\5"+
    "\1\27\1\30\1\31\1\3\1\4\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\15\30\1\32\1\33"+
    "\2\0\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\14\5\1\44\6\5\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\14\30\1\44\6\30\1\45"+
    "\1\46\2\47\2\0\4\5\1\50\6\5\1\51\7\5"+
    "\4\30\1\50\6\30\1\51\7\30\1\0\1\5\1\52"+
    "\2\5\1\53\3\5\1\54\1\55\6\5\1\56\1\30"+
    "\1\52\2\30\1\53\3\30\1\54\1\55\6\30\1\56"+
    "\3\5\1\57\1\5\1\60\1\61\1\62\4\5\3\30"+
    "\1\57\1\30\1\60\1\61\1\62\4\30\3\5\1\63"+
    "\1\64\2\5\1\65\3\30\1\63\1\64\2\30\1\65"+
    "\1\66\1\67\2\5\1\70\1\66\1\67\2\30\1\70"+
    "\1\71\1\5\1\71\1\30\2\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\134\0\270\0\134\0\346"+
    "\0\134\0\134\0\134\0\134\0\134\0\134\0\134\0\134"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\134\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\134\0\u04da"+
    "\0\134\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da"+
    "\0\u04da\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u04da\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\134\0\u08ce\0\u08fc\0\u092a\0\134\0\134\0\134\0\134"+
    "\0\134\0\134\0\134\0\134\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\346\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u04da"+
    "\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u04da\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\134\0\134\0\u0fd0\0\134\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\346\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\u11f8\0\346\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u04da"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u04da\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\346\0\u16d2\0\u1700\0\346\0\u172e\0\u175c\0\u178a\0\346"+
    "\0\346\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\346"+
    "\0\u18cc\0\u04da\0\u18fa\0\u1928\0\u04da\0\u1956\0\u1984\0\u19b2"+
    "\0\u04da\0\u04da\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u04da\0\u1af4\0\u1b22\0\u1b50\0\346\0\u1b7e\0\346\0\346"+
    "\0\346\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u04da\0\u1cee\0\u04da\0\u04da\0\u04da\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\346\0\346\0\u1e5e\0\u1e8c"+
    "\0\346\0\u1eba\0\u1ee8\0\u1f16\0\u04da\0\u04da\0\u1f44\0\u1f72"+
    "\0\u04da\0\346\0\346\0\u1fa0\0\u1fce\0\346\0\u04da\0\u04da"+
    "\0\u1ffc\0\u202a\0\u04da\0\346\0\u2058\0\u04da\0\u2086\0\346"+
    "\0\u04da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\10\1\33\1\34\1\35\1\36\1\37\1\10"+
    "\1\40\1\10\1\41\1\42\1\43\1\44\1\10\1\45"+
    "\1\10\1\46\1\47\1\3\2\50\1\51\1\50\1\52"+
    "\1\53\3\50\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\2\50\1\75\1\76\1\77\1\100"+
    "\1\101\1\50\1\102\1\50\1\103\1\104\1\105\1\106"+
    "\1\50\1\107\1\50\1\110\1\111\1\112\60\0\1\5"+
    "\57\0\1\113\1\114\56\0\3\10\20\0\23\10\22\0"+
    "\1\115\55\0\1\116\55\0\1\117\55\0\1\120\61\0"+
    "\1\121\56\0\1\122\50\0\1\123\55\0\1\124\43\0"+
    "\3\10\20\0\1\10\1\125\21\10\10\0\3\10\20\0"+
    "\2\10\1\126\5\10\1\127\12\10\10\0\3\10\20\0"+
    "\1\130\22\10\10\0\3\10\20\0\3\10\1\131\13\10"+
    "\1\132\3\10\10\0\3\10\20\0\2\10\1\133\20\10"+
    "\10\0\3\10\20\0\11\10\1\134\5\10\1\135\3\10"+
    "\10\0\3\10\20\0\16\10\1\136\2\10\1\137\1\10"+
    "\10\0\3\10\20\0\5\10\1\140\6\10\1\141\6\10"+
    "\10\0\3\10\20\0\4\10\1\142\16\10\10\0\3\10"+
    "\20\0\21\10\1\143\1\10\10\0\3\10\20\0\3\10"+
    "\1\144\17\10\10\0\3\10\20\0\16\10\1\145\1\146"+
    "\3\10\10\0\3\10\20\0\1\10\1\147\21\10\2\0"+
    "\2\50\1\0\51\50\2\0\2\50\1\0\15\50\1\150"+
    "\33\50\2\0\2\50\1\0\15\50\1\151\33\50\2\0"+
    "\2\50\1\0\15\50\1\152\33\50\2\0\2\50\1\0"+
    "\15\50\1\153\33\50\2\0\2\50\1\0\21\50\1\154"+
    "\27\50\2\0\2\50\1\0\22\50\1\155\26\50\2\0"+
    "\2\50\1\0\15\50\1\156\33\50\2\0\2\50\1\0"+
    "\15\50\1\157\33\50\2\0\2\50\1\0\27\50\1\160"+
    "\21\50\2\0\2\50\1\0\30\50\1\161\5\50\1\162"+
    "\12\50\2\0\2\50\1\0\26\50\1\163\22\50\2\0"+
    "\2\50\1\0\31\50\1\164\13\50\1\165\3\50\2\0"+
    "\2\50\1\0\30\50\1\166\20\50\2\0\2\50\1\0"+
    "\37\50\1\167\5\50\1\170\3\50\2\0\2\50\1\0"+
    "\44\50\1\171\2\50\1\172\1\50\2\0\2\50\1\0"+
    "\33\50\1\173\6\50\1\174\6\50\2\0\2\50\1\0"+
    "\32\50\1\175\16\50\2\0\2\50\1\0\47\50\1\176"+
    "\1\50\2\0\2\50\1\0\31\50\1\177\17\50\2\0"+
    "\2\50\1\0\44\50\1\200\1\201\3\50\2\0\2\50"+
    "\1\0\27\50\1\202\21\50\40\0\1\203\15\0\1\204"+
    "\1\0\1\113\1\205\1\206\53\113\5\207\1\210\50\207"+
    "\6\0\3\10\20\0\1\10\1\211\21\10\10\0\3\10"+
    "\20\0\7\10\1\212\13\10\10\0\3\10\20\0\11\10"+
    "\1\213\11\10\10\0\3\10\20\0\7\10\1\214\13\10"+
    "\10\0\3\10\20\0\15\10\1\215\5\10\10\0\3\10"+
    "\20\0\2\10\1\216\20\10\10\0\3\10\20\0\4\10"+
    "\1\217\16\10\10\0\3\10\20\0\4\10\1\220\16\10"+
    "\10\0\3\10\20\0\20\10\1\221\2\10\10\0\3\10"+
    "\20\0\17\10\1\222\3\10\10\0\3\10\20\0\13\10"+
    "\1\223\7\10\10\0\3\10\20\0\11\10\1\224\11\10"+
    "\10\0\3\10\20\0\2\10\1\225\20\10\10\0\3\10"+
    "\20\0\13\10\1\226\7\10\10\0\3\10\20\0\11\10"+
    "\1\227\11\10\10\0\3\10\20\0\1\10\1\230\11\10"+
    "\1\231\7\10\10\0\3\10\20\0\1\232\22\10\10\0"+
    "\3\10\20\0\13\10\1\233\7\10\2\0\2\50\1\0"+
    "\27\50\1\234\21\50\2\0\2\50\1\0\35\50\1\235"+
    "\13\50\2\0\2\50\1\0\37\50\1\236\11\50\2\0"+
    "\2\50\1\0\35\50\1\237\13\50\2\0\2\50\1\0"+
    "\43\50\1\240\5\50\2\0\2\50\1\0\30\50\1\241"+
    "\20\50\2\0\2\50\1\0\32\50\1\242\16\50\2\0"+
    "\2\50\1\0\32\50\1\243\16\50\2\0\2\50\1\0"+
    "\46\50\1\244\2\50\2\0\2\50\1\0\45\50\1\245"+
    "\3\50\2\0\2\50\1\0\41\50\1\246\7\50\2\0"+
    "\2\50\1\0\37\50\1\247\11\50\2\0\2\50\1\0"+
    "\30\50\1\250\20\50\2\0\2\50\1\0\41\50\1\251"+
    "\7\50\2\0\2\50\1\0\37\50\1\252\11\50\2\0"+
    "\2\50\1\0\27\50\1\253\11\50\1\254\7\50\2\0"+
    "\2\50\1\0\26\50\1\255\22\50\2\0\2\50\1\0"+
    "\41\50\1\256\7\50\4\0\1\206\53\0\5\207\1\257"+
    "\50\207\4\0\1\206\1\210\56\0\3\10\20\0\2\10"+
    "\1\260\20\10\10\0\3\10\20\0\3\10\1\261\17\10"+
    "\10\0\3\10\20\0\3\10\1\262\17\10\10\0\3\10"+
    "\20\0\11\10\1\263\11\10\10\0\3\10\20\0\2\10"+
    "\1\264\20\10\10\0\3\10\20\0\7\10\1\265\13\10"+
    "\10\0\3\10\20\0\11\10\1\266\11\10\10\0\3\10"+
    "\20\0\3\10\1\267\17\10\10\0\3\10\20\0\3\10"+
    "\1\270\17\10\10\0\3\10\20\0\7\10\1\271\13\10"+
    "\10\0\3\10\20\0\7\10\1\272\13\10\10\0\3\10"+
    "\20\0\2\10\1\273\20\10\10\0\3\10\20\0\17\10"+
    "\1\274\3\10\10\0\3\10\20\0\11\10\1\275\11\10"+
    "\10\0\3\10\20\0\22\10\1\276\10\0\3\10\20\0"+
    "\2\10\1\277\20\10\10\0\3\10\20\0\12\10\1\300"+
    "\10\10\2\0\2\50\1\0\30\50\1\301\20\50\2\0"+
    "\2\50\1\0\31\50\1\302\17\50\2\0\2\50\1\0"+
    "\31\50\1\303\17\50\2\0\2\50\1\0\37\50\1\304"+
    "\11\50\2\0\2\50\1\0\30\50\1\305\20\50\2\0"+
    "\2\50\1\0\35\50\1\306\13\50\2\0\2\50\1\0"+
    "\37\50\1\307\11\50\2\0\2\50\1\0\31\50\1\310"+
    "\17\50\2\0\2\50\1\0\31\50\1\311\17\50\2\0"+
    "\2\50\1\0\35\50\1\312\13\50\2\0\2\50\1\0"+
    "\35\50\1\313\13\50\2\0\2\50\1\0\30\50\1\314"+
    "\20\50\2\0\2\50\1\0\45\50\1\315\3\50\2\0"+
    "\2\50\1\0\37\50\1\316\11\50\2\0\2\50\1\0"+
    "\50\50\1\317\2\0\2\50\1\0\30\50\1\320\20\50"+
    "\2\0\2\50\1\0\40\50\1\321\10\50\2\0\4\207"+
    "\1\206\1\257\50\207\6\0\3\10\20\0\3\10\1\322"+
    "\17\10\10\0\3\10\20\0\5\10\1\323\15\10\10\0"+
    "\3\10\20\0\16\10\1\324\4\10\10\0\3\10\20\0"+
    "\7\10\1\325\13\10\10\0\3\10\20\0\13\10\1\326"+
    "\7\10\10\0\3\10\20\0\16\10\1\327\4\10\10\0"+
    "\3\10\20\0\3\10\1\330\17\10\10\0\3\10\20\0"+
    "\3\10\1\331\17\10\10\0\3\10\20\0\16\10\1\332"+
    "\4\10\10\0\3\10\20\0\3\10\1\333\17\10\10\0"+
    "\3\10\20\0\4\10\1\334\16\10\10\0\3\10\20\0"+
    "\13\10\1\335\7\10\2\0\2\50\1\0\31\50\1\336"+
    "\17\50\2\0\2\50\1\0\33\50\1\337\15\50\2\0"+
    "\2\50\1\0\44\50\1\340\4\50\2\0\2\50\1\0"+
    "\35\50\1\341\13\50\2\0\2\50\1\0\41\50\1\342"+
    "\7\50\2\0\2\50\1\0\44\50\1\343\4\50\2\0"+
    "\2\50\1\0\31\50\1\344\17\50\2\0\2\50\1\0"+
    "\31\50\1\345\17\50\2\0\2\50\1\0\44\50\1\346"+
    "\4\50\2\0\2\50\1\0\31\50\1\347\17\50\2\0"+
    "\2\50\1\0\32\50\1\350\16\50\2\0\2\50\1\0"+
    "\41\50\1\351\7\50\10\0\3\10\20\0\4\10\1\352"+
    "\16\10\10\0\3\10\20\0\12\10\1\353\10\10\10\0"+
    "\3\10\20\0\4\10\1\354\16\10\10\0\3\10\20\0"+
    "\6\10\1\355\14\10\10\0\3\10\20\0\5\10\1\356"+
    "\15\10\10\0\3\10\20\0\6\10\1\357\14\10\10\0"+
    "\3\10\20\0\11\10\1\360\11\10\10\0\3\10\20\0"+
    "\6\10\1\361\14\10\2\0\2\50\1\0\32\50\1\362"+
    "\16\50\2\0\2\50\1\0\40\50\1\363\10\50\2\0"+
    "\2\50\1\0\32\50\1\364\16\50\2\0\2\50\1\0"+
    "\34\50\1\365\14\50\2\0\2\50\1\0\33\50\1\366"+
    "\15\50\2\0\2\50\1\0\34\50\1\367\14\50\2\0"+
    "\2\50\1\0\37\50\1\370\11\50\2\0\2\50\1\0"+
    "\34\50\1\371\14\50\10\0\3\10\20\0\5\10\1\372"+
    "\15\10\10\0\3\10\20\0\7\10\1\373\13\10\10\0"+
    "\3\10\20\0\6\10\1\374\14\10\10\0\3\10\20\0"+
    "\11\10\1\375\11\10\10\0\3\10\20\0\3\10\1\376"+
    "\17\10\2\0\2\50\1\0\33\50\1\377\15\50\2\0"+
    "\2\50\1\0\35\50\1\u0100\13\50\2\0\2\50\1\0"+
    "\34\50\1\u0101\14\50\2\0\2\50\1\0\37\50\1\u0102"+
    "\11\50\2\0\2\50\1\0\31\50\1\u0103\17\50\10\0"+
    "\3\10\20\0\11\10\1\u0104\11\10\10\0\3\10\20\0"+
    "\3\10\1\u0105\17\10\2\0\2\50\1\0\37\50\1\u0106"+
    "\11\50\2\0\2\50\1\0\31\50\1\u0107\17\50\10\0"+
    "\3\10\20\0\12\10\1\u0108\10\10\2\0\2\50\1\0"+
    "\40\50\1\u0109\10\50\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8372];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\10\11"+
    "\6\1\1\11\17\1\1\11\1\1\1\11\37\1\1\11"+
    "\1\1\2\0\10\11\56\1\2\11\1\1\1\11\2\0"+
    "\46\1\1\0\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

    StringBuffer string = new StringBuffer();

    int ENDINPUT = 0;
    int BOOLEAN = 1;
    int CAND = 2;
    int CLASS = 3;
    int COR = 4;
    int ELSE = 5;
    int EQEQ = 6;
    int EXTENDS = 7;
    int FALSE = 8;
    int IDENT = 9;
    int IF = 10;
    int INT = 11;
    int INTLIT = 12;
    int NEQ = 13;
    int NEW = 14;
    int NULL = 15;
    int RETURN = 16;
    int STATIC = 17;
    int SUPER = 18;
    int THIS = 19;
    int TRUE = 20;
    int VOID = 21;
    int WHILE = 22;
    int GTEQ = 23;
    int LTEQ = 24;
    int PLUSEQ = 25;
    int MINUSEQ = 26;
    int PRIVATE = 27;
    int PROTECTED = 28;
    int PUBLIC = 29;
    int ABSTRACT = 30;
    int STRLIT = 31;
    // '!' (code=33)
    // '&' (code=38)
    // '(' (code=40)
    // ')' (code=41)
    // '*' (code=42)
    // '+' (code=43)
    // ',' (code=44)
    // '-' (code=45)
    // '.' (code=46)
    // '/' (code=47)
    // ';' (code=59)
    // '<' (code=60)
    // '=' (code=61)
    // '>' (code=62)
    // '^' (code=94)
    // '{' (code=123)
    // '|' (code=124)
    // '}' (code=125)



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore whitespace */
          }
        case 59: break;
        case 36: 
          { return IF;
          }
        case 60: break;
        case 54: 
          { return BOOLEAN;
          }
        case 61: break;
        case 9: 
          { return '{';
          }
        case 62: break;
        case 22: 
          { return '-';
          }
        case 63: break;
        case 15: 
          { return '>';
          }
        case 64: break;
        case 26: 
          { yybegin(YYINITIAL); return STRLIT;
          }
        case 65: break;
        case 29: 
          { return GTEQ;
          }
        case 66: break;
        case 23: 
          { string.setLength(0); yybegin(STRING);
          }
        case 67: break;
        case 12: 
          { return ',';
          }
        case 68: break;
        case 35: 
          { return MINUSEQ;
          }
        case 69: break;
        case 14: 
          { return '=';
          }
        case 70: break;
        case 58: 
          { return PROTECTED;
          }
        case 71: break;
        case 1: 
          { System.out.println("Illegal char, '" + yytext() +
                   "' line: " + yyline + ", column: " + yychar);
          }
        case 72: break;
        case 27: 
          { string.append('\\');
          }
        case 73: break;
        case 49: 
          { return FALSE;
          }
        case 74: break;
        case 21: 
          { return '+';
          }
        case 75: break;
        case 16: 
          { return '<';
          }
        case 76: break;
        case 25: 
          { System.out.print(yytext());
          }
        case 77: break;
        case 56: 
          { return PRIVATE;
          }
        case 78: break;
        case 20: 
          { return '^';
          }
        case 79: break;
        case 4: 
          { return '*';
          }
        case 80: break;
        case 11: 
          { return ';';
          }
        case 81: break;
        case 43: 
          { return NULL;
          }
        case 82: break;
        case 17: 
          { return '!';
          }
        case 83: break;
        case 28: 
          { return EQEQ;
          }
        case 84: break;
        case 38: 
          { string.append('\"');
          }
        case 85: break;
        case 55: 
          { return EXTENDS;
          }
        case 86: break;
        case 41: 
          { return INT;
          }
        case 87: break;
        case 8: 
          { return ')';
          }
        case 88: break;
        case 45: 
          { return THIS;
          }
        case 89: break;
        case 48: 
          { return SUPER;
          }
        case 90: break;
        case 31: 
          { return NEQ;
          }
        case 91: break;
        case 33: 
          { return COR;
          }
        case 92: break;
        case 40: 
          { return NEW;
          }
        case 93: break;
        case 32: 
          { return CAND;
          }
        case 94: break;
        case 7: 
          { return '(';
          }
        case 95: break;
        case 47: 
          { return CLASS;
          }
        case 96: break;
        case 37: 
          { string.append('\n');
          }
        case 97: break;
        case 42: 
          { return ELSE;
          }
        case 98: break;
        case 52: 
          { return RETURN;
          }
        case 99: break;
        case 6: 
          { return INTLIT;
          }
        case 100: break;
        case 50: 
          { return WHILE;
          }
        case 101: break;
        case 34: 
          { return PLUSEQ;
          }
        case 102: break;
        case 46: 
          { return VOID;
          }
        case 103: break;
        case 39: 
          { /* throw away comments */
          }
        case 104: break;
        case 30: 
          { return LTEQ;
          }
        case 105: break;
        case 10: 
          { return '}';
          }
        case 106: break;
        case 53: 
          { return PUBLIC;
          }
        case 107: break;
        case 44: 
          { return TRUE;
          }
        case 108: break;
        case 5: 
          { return IDENT;
          }
        case 109: break;
        case 3: 
          { return '/';
          }
        case 110: break;
        case 51: 
          { return STATIC;
          }
        case 111: break;
        case 57: 
          { return ABSTRACT;
          }
        case 112: break;
        case 18: 
          { return '&';
          }
        case 113: break;
        case 19: 
          { return '|';
          }
        case 114: break;
        case 24: 
          { string.append( yytext() );
          }
        case 115: break;
        case 13: 
          { return '.';
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
