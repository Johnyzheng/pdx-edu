/* The following code was generated by JFlex 1.4.2 on 11/4/09 4:49 PM */

// Based on the "simple example" in the JFlex manual:
// http://jflex.de/manual.html

/* JFlex example: part of Java language lexer specification */
//import java_cup.runtime.*;
//import compiler.*;

/**
 * This class is a simple example lexer.
 */



public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\22\1\53"+
    "\3\0\1\23\1\0\1\10\1\11\1\5\1\26\1\15\1\27\1\16"+
    "\1\4\12\7\1\0\1\14\1\21\1\17\1\20\2\0\32\6\1\0"+
    "\1\54\1\0\1\25\1\7\1\0\1\34\1\30\1\36\1\42\1\33"+
    "\1\44\1\6\1\51\1\43\2\6\1\32\1\6\1\35\1\31\1\50"+
    "\1\6\1\46\1\37\1\41\1\47\1\52\1\45\1\40\2\6\1\12"+
    "\1\24\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\15\5\1\26"+
    "\1\27\1\30\1\3\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\15\27\1\31\1\32\2\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\14\5\1\43\6\5\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\14\27\1\43\6\27\1\44\1\45"+
    "\2\46\2\0\4\5\1\47\6\5\1\50\7\5\4\27"+
    "\1\47\6\27\1\50\7\27\1\0\1\5\1\51\2\5"+
    "\1\52\3\5\1\53\1\54\6\5\1\55\1\27\1\51"+
    "\2\27\1\52\3\27\1\53\1\54\6\27\1\55\3\5"+
    "\1\56\1\5\1\57\1\60\1\61\4\5\3\27\1\56"+
    "\1\27\1\57\1\60\1\61\4\27\3\5\1\62\1\63"+
    "\2\5\1\64\3\27\1\62\1\63\2\27\1\64\1\65"+
    "\1\66\2\5\1\67\1\65\1\66\2\27\1\67\1\70"+
    "\1\5\1\70\1\27\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\132\0\264\0\132\0\341"+
    "\0\132\0\132\0\132\0\132\0\132\0\132\0\132\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\132\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\132\0\u04bf\0\132"+
    "\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf"+
    "\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u04bf"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\132"+
    "\0\u089d\0\u08ca\0\u08f7\0\132\0\132\0\132\0\132\0\132"+
    "\0\132\0\132\0\132\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8"+
    "\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\341"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u04bf\0\u04bf"+
    "\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u04bf\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u04bf\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e"+
    "\0\u0f4b\0\132\0\132\0\u0f78\0\132\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u1059\0\u1086\0\341\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\341\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u04bf\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u04bf\0\u14be\0\u14eb"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\341"+
    "\0\u1653\0\u1680\0\341\0\u16ad\0\u16da\0\u1707\0\341\0\341"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\341\0\u1842"+
    "\0\u04bf\0\u186f\0\u189c\0\u04bf\0\u18c9\0\u18f6\0\u1923\0\u04bf"+
    "\0\u04bf\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u04bf"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\341\0\u1ae5\0\341\0\341\0\341"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u04bf"+
    "\0\u1c4d\0\u04bf\0\u04bf\0\u04bf\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01"+
    "\0\u1d2e\0\u1d5b\0\u1d88\0\341\0\341\0\u1db5\0\u1de2\0\341"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u04bf\0\u04bf\0\u1e96\0\u1ec3\0\u04bf"+
    "\0\341\0\341\0\u1ef0\0\u1f1d\0\341\0\u04bf\0\u04bf\0\u1f4a"+
    "\0\u1f77\0\u04bf\0\341\0\u1fa4\0\u04bf\0\u1fd1\0\341\0\u04bf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\10\1\32\1\33\1\34\1\35\1\36\1\10\1\37"+
    "\1\10\1\40\1\41\1\42\1\43\1\10\1\44\1\10"+
    "\1\45\1\46\1\3\2\47\1\50\1\47\1\51\1\52"+
    "\2\47\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\2\47\1\74\1\75\1\76\1\77\1\100"+
    "\1\47\1\101\1\47\1\102\1\103\1\104\1\105\1\47"+
    "\1\106\1\47\1\107\1\110\1\111\57\0\1\5\56\0"+
    "\1\112\1\113\55\0\2\10\20\0\23\10\21\0\1\114"+
    "\54\0\1\115\54\0\1\116\54\0\1\117\60\0\1\120"+
    "\55\0\1\121\47\0\1\122\54\0\1\123\43\0\2\10"+
    "\20\0\1\10\1\124\21\10\10\0\2\10\20\0\2\10"+
    "\1\125\5\10\1\126\12\10\10\0\2\10\20\0\1\127"+
    "\22\10\10\0\2\10\20\0\3\10\1\130\13\10\1\131"+
    "\3\10\10\0\2\10\20\0\2\10\1\132\20\10\10\0"+
    "\2\10\20\0\11\10\1\133\5\10\1\134\3\10\10\0"+
    "\2\10\20\0\16\10\1\135\2\10\1\136\1\10\10\0"+
    "\2\10\20\0\5\10\1\137\6\10\1\140\6\10\10\0"+
    "\2\10\20\0\4\10\1\141\16\10\10\0\2\10\20\0"+
    "\21\10\1\142\1\10\10\0\2\10\20\0\3\10\1\143"+
    "\17\10\10\0\2\10\20\0\16\10\1\144\1\145\3\10"+
    "\10\0\2\10\20\0\1\10\1\146\21\10\2\0\2\47"+
    "\1\0\50\47\2\0\2\47\1\0\14\47\1\147\33\47"+
    "\2\0\2\47\1\0\14\47\1\150\33\47\2\0\2\47"+
    "\1\0\14\47\1\151\33\47\2\0\2\47\1\0\14\47"+
    "\1\152\33\47\2\0\2\47\1\0\20\47\1\153\27\47"+
    "\2\0\2\47\1\0\21\47\1\154\26\47\2\0\2\47"+
    "\1\0\14\47\1\155\33\47\2\0\2\47\1\0\14\47"+
    "\1\156\33\47\2\0\2\47\1\0\26\47\1\157\21\47"+
    "\2\0\2\47\1\0\27\47\1\160\5\47\1\161\12\47"+
    "\2\0\2\47\1\0\25\47\1\162\22\47\2\0\2\47"+
    "\1\0\30\47\1\163\13\47\1\164\3\47\2\0\2\47"+
    "\1\0\27\47\1\165\20\47\2\0\2\47\1\0\36\47"+
    "\1\166\5\47\1\167\3\47\2\0\2\47\1\0\43\47"+
    "\1\170\2\47\1\171\1\47\2\0\2\47\1\0\32\47"+
    "\1\172\6\47\1\173\6\47\2\0\2\47\1\0\31\47"+
    "\1\174\16\47\2\0\2\47\1\0\46\47\1\175\1\47"+
    "\2\0\2\47\1\0\30\47\1\176\17\47\2\0\2\47"+
    "\1\0\43\47\1\177\1\200\3\47\2\0\2\47\1\0"+
    "\26\47\1\201\21\47\37\0\1\202\15\0\1\203\1\0"+
    "\1\112\1\204\1\205\52\112\5\206\1\207\47\206\6\0"+
    "\2\10\20\0\1\10\1\210\21\10\10\0\2\10\20\0"+
    "\7\10\1\211\13\10\10\0\2\10\20\0\11\10\1\212"+
    "\11\10\10\0\2\10\20\0\7\10\1\213\13\10\10\0"+
    "\2\10\20\0\15\10\1\214\5\10\10\0\2\10\20\0"+
    "\2\10\1\215\20\10\10\0\2\10\20\0\4\10\1\216"+
    "\16\10\10\0\2\10\20\0\4\10\1\217\16\10\10\0"+
    "\2\10\20\0\20\10\1\220\2\10\10\0\2\10\20\0"+
    "\17\10\1\221\3\10\10\0\2\10\20\0\13\10\1\222"+
    "\7\10\10\0\2\10\20\0\11\10\1\223\11\10\10\0"+
    "\2\10\20\0\2\10\1\224\20\10\10\0\2\10\20\0"+
    "\13\10\1\225\7\10\10\0\2\10\20\0\11\10\1\226"+
    "\11\10\10\0\2\10\20\0\1\10\1\227\11\10\1\230"+
    "\7\10\10\0\2\10\20\0\1\231\22\10\10\0\2\10"+
    "\20\0\13\10\1\232\7\10\2\0\2\47\1\0\26\47"+
    "\1\233\21\47\2\0\2\47\1\0\34\47\1\234\13\47"+
    "\2\0\2\47\1\0\36\47\1\235\11\47\2\0\2\47"+
    "\1\0\34\47\1\236\13\47\2\0\2\47\1\0\42\47"+
    "\1\237\5\47\2\0\2\47\1\0\27\47\1\240\20\47"+
    "\2\0\2\47\1\0\31\47\1\241\16\47\2\0\2\47"+
    "\1\0\31\47\1\242\16\47\2\0\2\47\1\0\45\47"+
    "\1\243\2\47\2\0\2\47\1\0\44\47\1\244\3\47"+
    "\2\0\2\47\1\0\40\47\1\245\7\47\2\0\2\47"+
    "\1\0\36\47\1\246\11\47\2\0\2\47\1\0\27\47"+
    "\1\247\20\47\2\0\2\47\1\0\40\47\1\250\7\47"+
    "\2\0\2\47\1\0\36\47\1\251\11\47\2\0\2\47"+
    "\1\0\26\47\1\252\11\47\1\253\7\47\2\0\2\47"+
    "\1\0\25\47\1\254\22\47\2\0\2\47\1\0\40\47"+
    "\1\255\7\47\4\0\1\205\52\0\5\206\1\256\47\206"+
    "\4\0\1\205\1\207\55\0\2\10\20\0\2\10\1\257"+
    "\20\10\10\0\2\10\20\0\3\10\1\260\17\10\10\0"+
    "\2\10\20\0\3\10\1\261\17\10\10\0\2\10\20\0"+
    "\11\10\1\262\11\10\10\0\2\10\20\0\2\10\1\263"+
    "\20\10\10\0\2\10\20\0\7\10\1\264\13\10\10\0"+
    "\2\10\20\0\11\10\1\265\11\10\10\0\2\10\20\0"+
    "\3\10\1\266\17\10\10\0\2\10\20\0\3\10\1\267"+
    "\17\10\10\0\2\10\20\0\7\10\1\270\13\10\10\0"+
    "\2\10\20\0\7\10\1\271\13\10\10\0\2\10\20\0"+
    "\2\10\1\272\20\10\10\0\2\10\20\0\17\10\1\273"+
    "\3\10\10\0\2\10\20\0\11\10\1\274\11\10\10\0"+
    "\2\10\20\0\22\10\1\275\10\0\2\10\20\0\2\10"+
    "\1\276\20\10\10\0\2\10\20\0\12\10\1\277\10\10"+
    "\2\0\2\47\1\0\27\47\1\300\20\47\2\0\2\47"+
    "\1\0\30\47\1\301\17\47\2\0\2\47\1\0\30\47"+
    "\1\302\17\47\2\0\2\47\1\0\36\47\1\303\11\47"+
    "\2\0\2\47\1\0\27\47\1\304\20\47\2\0\2\47"+
    "\1\0\34\47\1\305\13\47\2\0\2\47\1\0\36\47"+
    "\1\306\11\47\2\0\2\47\1\0\30\47\1\307\17\47"+
    "\2\0\2\47\1\0\30\47\1\310\17\47\2\0\2\47"+
    "\1\0\34\47\1\311\13\47\2\0\2\47\1\0\34\47"+
    "\1\312\13\47\2\0\2\47\1\0\27\47\1\313\20\47"+
    "\2\0\2\47\1\0\44\47\1\314\3\47\2\0\2\47"+
    "\1\0\36\47\1\315\11\47\2\0\2\47\1\0\47\47"+
    "\1\316\2\0\2\47\1\0\27\47\1\317\20\47\2\0"+
    "\2\47\1\0\37\47\1\320\10\47\2\0\4\206\1\205"+
    "\1\256\47\206\6\0\2\10\20\0\3\10\1\321\17\10"+
    "\10\0\2\10\20\0\5\10\1\322\15\10\10\0\2\10"+
    "\20\0\16\10\1\323\4\10\10\0\2\10\20\0\7\10"+
    "\1\324\13\10\10\0\2\10\20\0\13\10\1\325\7\10"+
    "\10\0\2\10\20\0\16\10\1\326\4\10\10\0\2\10"+
    "\20\0\3\10\1\327\17\10\10\0\2\10\20\0\3\10"+
    "\1\330\17\10\10\0\2\10\20\0\16\10\1\331\4\10"+
    "\10\0\2\10\20\0\3\10\1\332\17\10\10\0\2\10"+
    "\20\0\4\10\1\333\16\10\10\0\2\10\20\0\13\10"+
    "\1\334\7\10\2\0\2\47\1\0\30\47\1\335\17\47"+
    "\2\0\2\47\1\0\32\47\1\336\15\47\2\0\2\47"+
    "\1\0\43\47\1\337\4\47\2\0\2\47\1\0\34\47"+
    "\1\340\13\47\2\0\2\47\1\0\40\47\1\341\7\47"+
    "\2\0\2\47\1\0\43\47\1\342\4\47\2\0\2\47"+
    "\1\0\30\47\1\343\17\47\2\0\2\47\1\0\30\47"+
    "\1\344\17\47\2\0\2\47\1\0\43\47\1\345\4\47"+
    "\2\0\2\47\1\0\30\47\1\346\17\47\2\0\2\47"+
    "\1\0\31\47\1\347\16\47\2\0\2\47\1\0\40\47"+
    "\1\350\7\47\10\0\2\10\20\0\4\10\1\351\16\10"+
    "\10\0\2\10\20\0\12\10\1\352\10\10\10\0\2\10"+
    "\20\0\4\10\1\353\16\10\10\0\2\10\20\0\6\10"+
    "\1\354\14\10\10\0\2\10\20\0\5\10\1\355\15\10"+
    "\10\0\2\10\20\0\6\10\1\356\14\10\10\0\2\10"+
    "\20\0\11\10\1\357\11\10\10\0\2\10\20\0\6\10"+
    "\1\360\14\10\2\0\2\47\1\0\31\47\1\361\16\47"+
    "\2\0\2\47\1\0\37\47\1\362\10\47\2\0\2\47"+
    "\1\0\31\47\1\363\16\47\2\0\2\47\1\0\33\47"+
    "\1\364\14\47\2\0\2\47\1\0\32\47\1\365\15\47"+
    "\2\0\2\47\1\0\33\47\1\366\14\47\2\0\2\47"+
    "\1\0\36\47\1\367\11\47\2\0\2\47\1\0\33\47"+
    "\1\370\14\47\10\0\2\10\20\0\5\10\1\371\15\10"+
    "\10\0\2\10\20\0\7\10\1\372\13\10\10\0\2\10"+
    "\20\0\6\10\1\373\14\10\10\0\2\10\20\0\11\10"+
    "\1\374\11\10\10\0\2\10\20\0\3\10\1\375\17\10"+
    "\2\0\2\47\1\0\32\47\1\376\15\47\2\0\2\47"+
    "\1\0\34\47\1\377\13\47\2\0\2\47\1\0\33\47"+
    "\1\u0100\14\47\2\0\2\47\1\0\36\47\1\u0101\11\47"+
    "\2\0\2\47\1\0\30\47\1\u0102\17\47\10\0\2\10"+
    "\20\0\11\10\1\u0103\11\10\10\0\2\10\20\0\3\10"+
    "\1\u0104\17\10\2\0\2\47\1\0\36\47\1\u0105\11\47"+
    "\2\0\2\47\1\0\30\47\1\u0106\17\47\10\0\2\10"+
    "\20\0\12\10\1\u0107\10\10\2\0\2\47\1\0\37\47"+
    "\1\u0108\10\47\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\7\11"+
    "\6\1\1\11\17\1\1\11\1\1\1\11\37\1\1\11"+
    "\1\1\2\0\10\11\56\1\2\11\1\1\1\11\2\0"+
    "\46\1\1\0\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

    StringBuffer string = new StringBuffer();

    int ENDINPUT = 0;
    int BOOLEAN = 1;
    int CAND = 2;
    int CLASS = 3;
    int COR = 4;
    int ELSE = 5;
    int EQEQ = 6;
    int EXTENDS = 7;
    int FALSE = 8;
    int IDENT = 9;
    int IF = 10;
    int INT = 11;
    int INTLIT = 12;
    int NEQ = 13;
    int NEW = 14;
    int NULL = 15;
    int RETURN = 16;
    int STATIC = 17;
    int SUPER = 18;
    int THIS = 19;
    int TRUE = 20;
    int VOID = 21;
    int WHILE = 22;
    int GTEQ = 23;
    int LTEQ = 24;
    int PLUSEQ = 25;
    int MINUSEQ = 26;
    int PRIVATE = 27;
    int PROTECTED = 28;
    int PUBLIC = 29;
    int ABSTRACT = 30;
    int STRLIT = 31;
    // '!' (code=33)
    // '&' (code=38)
    // '(' (code=40)
    // ')' (code=41)
    // '*' (code=42)
    // '+' (code=43)
    // ',' (code=44)
    // '-' (code=45)
    // '.' (code=46)
    // '/' (code=47)
    // ';' (code=59)
    // '<' (code=60)
    // '=' (code=61)
    // '>' (code=62)
    // '^' (code=94)
    // '{' (code=123)
    // '|' (code=124)
    // '}' (code=125)



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore whitespace */
          }
        case 58: break;
        case 35: 
          { return IF;
          }
        case 59: break;
        case 53: 
          { return BOOLEAN;
          }
        case 60: break;
        case 8: 
          { return '{';
          }
        case 61: break;
        case 21: 
          { return '-';
          }
        case 62: break;
        case 14: 
          { return '>';
          }
        case 63: break;
        case 25: 
          { yybegin(YYINITIAL); return STRLIT;
          }
        case 64: break;
        case 28: 
          { return GTEQ;
          }
        case 65: break;
        case 22: 
          { string.setLength(0); yybegin(STRING);
          }
        case 66: break;
        case 11: 
          { return ',';
          }
        case 67: break;
        case 34: 
          { return MINUSEQ;
          }
        case 68: break;
        case 13: 
          { return '=';
          }
        case 69: break;
        case 57: 
          { return PROTECTED;
          }
        case 70: break;
        case 1: 
          { System.out.println("Illegal char, '" + yytext() +
                   "' line: " + yyline + ", column: " + yychar);
          }
        case 71: break;
        case 26: 
          { string.append('\\');
          }
        case 72: break;
        case 48: 
          { return FALSE;
          }
        case 73: break;
        case 20: 
          { return '+';
          }
        case 74: break;
        case 15: 
          { return '<';
          }
        case 75: break;
        case 24: 
          { System.out.print(yytext());
          }
        case 76: break;
        case 55: 
          { return PRIVATE;
          }
        case 77: break;
        case 19: 
          { return '^';
          }
        case 78: break;
        case 4: 
          { return '*';
          }
        case 79: break;
        case 10: 
          { return ';';
          }
        case 80: break;
        case 42: 
          { return NULL;
          }
        case 81: break;
        case 16: 
          { return '!';
          }
        case 82: break;
        case 27: 
          { return EQEQ;
          }
        case 83: break;
        case 37: 
          { string.append('\"');
          }
        case 84: break;
        case 54: 
          { return EXTENDS;
          }
        case 85: break;
        case 40: 
          { return INT;
          }
        case 86: break;
        case 7: 
          { return ')';
          }
        case 87: break;
        case 44: 
          { return THIS;
          }
        case 88: break;
        case 47: 
          { return SUPER;
          }
        case 89: break;
        case 30: 
          { return NEQ;
          }
        case 90: break;
        case 32: 
          { return COR;
          }
        case 91: break;
        case 39: 
          { return NEW;
          }
        case 92: break;
        case 31: 
          { return CAND;
          }
        case 93: break;
        case 6: 
          { return '(';
          }
        case 94: break;
        case 46: 
          { return CLASS;
          }
        case 95: break;
        case 36: 
          { string.append('\n');
          }
        case 96: break;
        case 41: 
          { return ELSE;
          }
        case 97: break;
        case 51: 
          { return RETURN;
          }
        case 98: break;
        case 49: 
          { return WHILE;
          }
        case 99: break;
        case 33: 
          { return PLUSEQ;
          }
        case 100: break;
        case 45: 
          { return VOID;
          }
        case 101: break;
        case 38: 
          { /* throw away comments */
          }
        case 102: break;
        case 29: 
          { return LTEQ;
          }
        case 103: break;
        case 9: 
          { return '}';
          }
        case 104: break;
        case 52: 
          { return PUBLIC;
          }
        case 105: break;
        case 43: 
          { return TRUE;
          }
        case 106: break;
        case 5: 
          { return IDENT;
          }
        case 107: break;
        case 3: 
          { return '/';
          }
        case 108: break;
        case 50: 
          { return STATIC;
          }
        case 109: break;
        case 56: 
          { return ABSTRACT;
          }
        case 110: break;
        case 17: 
          { return '&';
          }
        case 111: break;
        case 18: 
          { return '|';
          }
        case 112: break;
        case 23: 
          { string.append( yytext() );
          }
        case 113: break;
        case 12: 
          { return '.';
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
