%package mini
%extends Phase

%{
import compiler.*;
import java.io.*;
%}

%semantic Object

%token  WHILE IF ELSE PRINT
%token	'(' ')' '{' '}' ';'

%right	'='
%left	LOR
%left	LAND
%left	'|'
%left	'^'
%left	'&'
%left	EQL NEQ
%left	'<' '>' LTE GTE
%left	'+' '-'
%left	'*' '/'
%right	'!' '~' UMINUS UPLUS

%token  <TInt>   TINT
%token  <TBool>  TBOOL
%token  <TDoub>  TDOUB
%token  <TArray> TARRAY
%token  <Id>     IDENT
%token  <IntLit> INTLIT
%type   <Stmts>  stmts
%type	<Stmt>   stmt
%type   <Expr>   expr test
%type   <VType>   vtype

%%
prog	: stmts				{ program = $1; }
	;
stmts	: stmts stmt			{ $$ = $1.addStmt($2); }
	| stmt				{ $$ = new Stmts($1); }
	;
stmt	: /* empty */ ';'		{ $$ = new Empty(); }
	| expr ';'			{ $$ = new ExprStmt($1); }
	| WHILE test stmt		{ $$ = new While($2, $3); }
	| IF test stmt ELSE stmt	{ $$ = new If($2, $3, $5); }
	| IF test stmt			{ $$ = new If($2, $3, new Empty()); }
	| PRINT expr ';'		{ $$ = new Print($2); }
	// | VTYPE '[' ']' IDENT		{ $$ = new VarArray($1, $4); }
	//| VTYPE IDENT ';'		{ $$ = new Variable($1, $2); }
	| '{' stmts '}'			{ $$ = new Block($2); }
	;
test	: '(' expr ')'			{ $$ = $2; }
	;
expr	: '-' expr       %prec UMINUS	{ $$ = new UMinus($2); }
	| '+' expr       %prec UPLUS	{ $$ = new UPlus($2); }
	| '!' expr			{ $$ = new LNot($2); }
	| '~' expr			{ $$ = new BNot($2); }
	| expr '+' expr			{ $$ = new Add($1, $3); }
	| expr '-' expr			{ $$ = new Sub($1, $3); }
	| expr '*' expr			{ $$ = new Mul($1, $3); }
	| expr '/' expr			{ $$ = new Div($1, $3); }
	| expr '<' expr			{ $$ = new Lt($1, $3); }
	| expr '>' expr			{ $$ = new Gt($1, $3); }
	| expr LTE expr			{ $$ = new Lte($1, $3); }
	| expr GTE expr			{ $$ = new Gte($1, $3); }
	| expr NEQ expr			{ $$ = new Neq($1, $3); }
	| expr EQL expr			{ $$ = new Eql($1, $3); }
	| expr '&' expr			{ $$ = new BAnd($1, $3); }
	| expr '|' expr			{ $$ = new BOr($1, $3); }
	| expr '^' expr			{ $$ = new BXor($1, $3); }
	| expr LAND expr		{ $$ = new LAnd($1, $3); }
	| expr LOR  expr		{ $$ = new LOr($1, $3); }
	| IDENT '=' expr		{ $$ = new Assign($1, $3); }
	//| VTYPE				{ $$ = new VarType($1); }
	| IDENT				{ $$ = $1; }
	| INTLIT			{ $$ = $1; }
	;
vtype	: TBOOL				{ $$ = new TBoolean(); }
	| TINT				{ $$ = new TInt(); }
	| TDOUB				{ $$ = new TDouble(); }
        | TARRAY			{ $$ = new TArray(); }
	;


%%

    private MiniLexer lexer;
    private Stmts     program;

    public MiniParser(Handler handler, MiniLexer lexer) {
      super(handler);
      this.lexer = lexer;
      lexer.nextToken();
      parse();
    }

    public Stmts getProgram() {
      return program;
    }

    private void yyerror(String msg) {
      report(new Failure(msg));
    }

